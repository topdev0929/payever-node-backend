import { HttpModule, MiddlewareConsumer, Module, NestModule } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { EventDispatcherModule } from '@pe/nest-kit';
import { FoldersPluginModule } from '@pe/folders-plugin';
import { ChannelModuleLocal } from '../channel/channel.module';
import { BillingSubscriptionEsExportCommand, SubscriptionPlanExportCommand } from './commands';
import {
  AccessController,
  AdminAccessConfigController,
  AdminConnectionPlanController,
  AdminCustomerSubscriptionPlanController,
  AdminSubscriptionNetworksController,
  AdminSubscriptionPlansController,
  AdminSubscriptionsController,
  CommonController,
  DomainController,
  PlansController,
  SubscriptionNetworkController,
  SubscriptionPlansController,
  SubscriptionPlansForBuilderController,
  SubscriptionProductsController,
  SubscriptionsController,
} from './controllers';
import {
  AppRegistryConsumer,
  AuthBusMessageController,
  BuilderMessagesConsumer,
  ProductsBusMessageController,
  RemoteSubscriptionsController,
  ThirdPartyPaymentsBusMessageController,
} from './consumers';
import {
  BusinessListener,
  ConnectionEventsListener,
  PlanEventsListener,
  ProductEventsListener,
  SubscriptionEventsListener,
  SubscriptionNetworkEventsListener,
  SubscriptionPlanEventsListener,
} from './event-listeners';
import {
  AccessConfigService,
  CategoryService,
  CommonService,
  ConnectionPlans,
  CustomerGroupsService,
  CustomerPlanService,
  CustomerSubscriptionPlanService,
  DomainService,
  FolderService,
  OnPublishConsumerService,
  Products,
  RabbitProducer,
  SubscriptionElasticService,
  SubscriptionNetworkService,
  SubscriptionPlanGroupService,
  SubscriptionPlanService,
  Subscriptions,
  SubscriptionsDataExtractor,
  ThirdParty,
} from './services';
import {
  ConnectionPlanSchema,
  ConnectionPlanSchemaName,
  PlanCustomerSchema,
  PlanCustomerSchemaName,
  PlanCustomerSubscriptionSchema,
  PlanCustomerSubscriptionSchemaName,
  ProductSchema,
  ProductSchemaName,
  SubscribersGroupSchema,
  SubscribersGroupSchemaName,
  SubscriptionPlanSchema,
  SubscriptionPlanSchemaName,
  SubscriptionPlansGroupSchema,
  SubscriptionPlansGroupSchemaName,
  SubscriptionSchema,
  SubscriptionSchemaName,
  SubscriptionNetworkSchemaName,
  SubscriptionNetworkSchema,
  DomainSchema,
  DomainSchemaName,
  AccessConfigSchema,
  AccessConfigSchemaName,
  CategorySchema,
  CategorySchemaName,
} from './schemas';
import {
  PlanCreate,
  PlanCustomerSubscriptionDelete,
  PlanCustomerSubscriptionUpdate,
  PlanDelete,
  PlanRead,
  PlanUpdate,
  ProductDelete,
  ProductUpdate,
  SubscriptionPlanDelete,
  SubscriptionPlanUpdate,
} from './voters';
import { CustomerSubscriptionPlanController } from './controllers/customer-subscription-plan.controller';
import { IntegrationModule } from '../integrations/integrations.module';
import { ProductsEventsProducer, SubscriptionPlanMessagesProducer, SubscriptionsMessagesProducer } from './producers';
import { environment, RabbitChannelsEnum, RabbitExchangeEnum } from '../environments';
import { ApplicationTypesEnum, BuilderThemeModule } from '@pe/builder-theme-kit';

@Module({
  controllers: [
    AppRegistryConsumer,
    BuilderMessagesConsumer,
    PlansController,
    ProductsBusMessageController,
    SubscriptionProductsController,
    SubscriptionsController,
    ThirdPartyPaymentsBusMessageController,
    SubscriptionPlansController,
    SubscriptionPlansForBuilderController,
    RemoteSubscriptionsController,
    CustomerSubscriptionPlanController,
    AuthBusMessageController,
    SubscriptionNetworkController,
    AccessController,
    CommonController,
    DomainController,
    AdminAccessConfigController,
    AdminConnectionPlanController,
    AdminCustomerSubscriptionPlanController,
    AdminSubscriptionNetworksController,
    AdminSubscriptionPlansController,
    AdminSubscriptionsController,
  ],
  imports: [
    HttpModule,
    EventDispatcherModule,
    MongooseModule.forFeature([
      { name: ConnectionPlanSchemaName, schema: ConnectionPlanSchema },
      { name: SubscriptionSchemaName, schema: SubscriptionSchema },
      { name: ProductSchemaName, schema: ProductSchema },
      { name: SubscriptionPlanSchemaName, schema: SubscriptionPlanSchema },
      { name: AccessConfigSchemaName, schema: AccessConfigSchema },
      { name: DomainSchemaName, schema: DomainSchema },
      { name: PlanCustomerSchemaName, schema: PlanCustomerSchema },
      { name: PlanCustomerSubscriptionSchemaName, schema: PlanCustomerSubscriptionSchema },
      { name: SubscribersGroupSchemaName, schema: SubscribersGroupSchema },
      { name: SubscriptionPlansGroupSchemaName, schema: SubscriptionPlansGroupSchema },
      { name: SubscriptionNetworkSchemaName, schema: SubscriptionNetworkSchema },
      { name: CategorySchemaName, schema: CategorySchema },
    ]),
    ChannelModuleLocal,
    FoldersPluginModule.forFeature({
      applicationScope: {
        documentFilterField: 'subscriptionNetwork',
        useApplicationScope: true,
      },
      combinedList: false,
      documentSchema: {
        schema: SubscriptionPlanSchema,
        schemaName: SubscriptionPlanSchemaName,
      },
      elastic: {
        env: environment.elasticEnv,
        index: {
          businessIdField: 'businessId',
          documentIdField: '_id',
          elasticIndex: `subscription-folder`,
          type: `subscription-folder`,
        },
        mappingFields: {
          appliesTo: {
            fielddata: true,
            type: 'text',
          },
          billingPeriod: {
            fielddata: true,
            type: 'text',
          },
          interval: {
            fielddata: true,
            type: 'text',
          },
          isDefault: {
            type: 'boolean',
          },
          name: {
            fielddata: true,
            type: 'text',
          },
          planType: {
            fielddata: true,
            type: 'text',
          },
          shortName: {
            fielddata: true,
            type: 'text',
          },
          subscriptionNetwork: {
            fielddata: true,
            type: 'text',
          },
          theme: {
            fielddata: true,
            type: 'text',
          },
          totalPrice: {
            fielddata: true,
            type: 'text',
          },
          updatedAt: {
            type: 'date',
          },
        },
        searchFields: [
          'appliesTo^1',
          'billingPeriod^1',
          '_id^1',
          'interval^1',
          'isDefault^1',
          'businessId^1',
          'name^1',
          'planType^1',
          'products^1',
          'shortName^1',
          'subscribers^1',
          'subscriptionNetwork^1',
          'theme^1',
          'totalPrice^1',
          'updatedAt^1',
        ],
        storeFields: [
          'appliesTo',
          'billingPeriod',
          'channelSet',
          'categories',
          '_id',
          'interval',
          'isDefault',
          'businessId',
          'name',
          'planType',
          'products',
          'shortName',
          'subscribers',
          'subscribersGroups',
          'subscribersEligibility',
          'subscriptionNetwork',
          'theme',
          'totalPrice',
          'updatedAt',
        ],
      },
      filters: [],
      microservice: 'subscriptions',

      rabbitConfig: {
        documentConsumer: {
          exchange: RabbitExchangeEnum.FolderEvents,
          rabbitChannel: RabbitChannelsEnum.FolderBillingSubscription,
        },
        exportConsumer: {
          exchange: RabbitExchangeEnum.FolderEventsExport,
          rabbitChannel: RabbitChannelsEnum.FolderBillingExportSubscription,
        },
      },
      redisConfig: environment.redis,
      useBusiness: true,
    }),
    IntegrationModule,
    BuilderThemeModule.forRoot({
      applicationSchema: SubscriptionNetworkSchema,
      applicationSchemaName: 'subscriptionnetworks',
      applicationType: ApplicationTypesEnum.Subscription,
      channel: RabbitChannelsEnum.BillingSubscription,
      redisUrl: environment.redis.url,
    }),
  ],
  providers: [
    // Commands
    BillingSubscriptionEsExportCommand,
    SubscriptionPlanExportCommand,
    // Listeners
    ConnectionEventsListener,
    SubscriptionNetworkEventsListener,
    ProductEventsListener,
    PlanEventsListener,
    SubscriptionEventsListener,
    SubscriptionPlanEventsListener,
    BusinessListener,
    // Services
    AccessConfigService,
    ConnectionPlans,
    CommonService,
    CustomerPlanService,
    CategoryService,
    CustomerSubscriptionPlanService,
    CustomerGroupsService,
    DomainService,
    Products,
    ThirdParty,
    RabbitProducer,
    Subscriptions,
    SubscriptionElasticService,
    SubscriptionPlanGroupService,
    SubscriptionPlanService,
    SubscriptionsDataExtractor,
    SubscriptionNetworkService,
    OnPublishConsumerService,
    FolderService,
    // Voters
    PlanCreate,
    PlanCustomerSubscriptionDelete,
    PlanCustomerSubscriptionUpdate,
    ConnectionEventsListener,
    ProductsEventsProducer,
    SubscriptionsMessagesProducer,
    SubscriptionPlanMessagesProducer,
    PlanDelete,
    PlanRead,
    PlanUpdate,
    ProductDelete,
    ProductUpdate,
    SubscriptionPlanDelete,
    SubscriptionPlanUpdate,
  ],
})

export class SubscriptionModule implements NestModule {
  public configure(): MiddlewareConsumer | void { }
}
