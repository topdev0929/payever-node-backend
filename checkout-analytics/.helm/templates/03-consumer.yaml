{{ $chartName := .Chart.Name }}
{{ $values := .Values }}
{{ $appName := printf "%s-consumer" $chartName }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $appName }}
  namespace: {{ $values.namespace }}

  labels:
    app: {{ $appName }}
    tier: nodejs
    type: consumer

  annotations:
    "werf.io/set-replicas-only-on-creation": "true"

spec:
  replicas: {{ $values.replicas.consumer.min }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ $appName }}
  template:
    metadata:
      labels:
        app: {{ $appName }}
        tier: nodejs
        type: consumer

      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'
    spec:
      priorityClassName: {{ $values.priorityClass }}
      terminationGracePeriodSeconds: 60
{{ if ne  .Values.deploy.env "test" }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: APP_PAY
                    operator: In
                    values:
                      - "true"
      tolerations:
        - effect: NoExecute
          key: APP_PAY
          operator: Exists
{{ end }}
      imagePullSecrets:
        - name: {{ $values.image.pullSecretName }}

      containers:
{{- if $values.enableRmqFallbackRepub }}
        - name: rmq
          image: {{ $values.image.rmq_repub }}
          imagePullPolicy: IfNotPresent
          command: [ "python", "rmqFallbackRepub.py", "async_events_checkout_analytics_app_micro" ]

          resources:
            requests:
              cpu: 20m
              memory: 40Mi
            limits:
              memory: 100Mi

          envFrom:
            - configMapRef:
                name: {{ $chartName }}
            - configMapRef:
                name: micro-url-map
            - secretRef:
                name: {{ $chartName }}

          env:
            - name: KUBERNETES_DEPLOYED
              value: "{{ now }}"
{{- end }}
        - name: node
          image: {{ $values.image.nodejs }}
          imagePullPolicy: IfNotPresent
          command: [ "/bin/bash", "-c", "/payever/deploy/consumer.sh" ]

          livenessProbe:
            httpGet:
              path: /api/status
              port: {{ $values.service.statusPort }}
            initialDelaySeconds: 150
            periodSeconds: 30
            timeoutSeconds: 3
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /api/status
              port: {{ $values.service.statusPort }}
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 15

          resources:
{{ if eq .Values.deploy.env "test" }}
{{ toYaml $values.resourcestest.consumer | indent 12 }}
{{ else if eq .Values.deploy.env "stage" }}
{{ toYaml $values.resourcesstage.consumer | indent 12 }}
{{ else }}
{{ toYaml $values.resourceslive.consumer | indent 12 }}
{{ end }}
          envFrom:
            - configMapRef:
                name: {{ $chartName }}
            - configMapRef:
                name: micro-url-map
            - secretRef:
                name: {{ $chartName }}

          env:
            - name: KUBERNETES_DEPLOYED
              value: "{{ now }}"
